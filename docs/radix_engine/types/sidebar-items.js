initSidebarItems({"constant":[["ACCOUNT_PACKAGE","The address of the account package."],["ECDSA_TOKEN","The ECDSA virtual resource address."],["ED25519_TOKEN","The ED25519 virtual resource address."],["RADIX_TOKEN","The XRD resource address."],["SYSTEM_TOKEN","The system token which allows access to system resources (e.g. setting epoch)"],["SYS_FAUCET_COMPONENT","The address of the SysFaucet component"],["SYS_FAUCET_PACKAGE","The address of the sys-faucet package."],["SYS_UTILS_PACKAGE","The address of the sys-utils package."]],"derive":[["Decode","Derive code that decodes this data structure from a byte array."],["Encode","Derive code that encodes this data structure"],["TypeId","Derive code that returns the type ID."]],"enum":[["AccessRule",""],["AccessRuleNode",""],["AddressError","Represents an error in addressing."],["AuthZoneFnIdentifier",""],["BucketFnIdentifier",""],["ComponentAddress","An instance of a blueprint, which lives in the ledger state."],["ComponentFnIdentifier",""],["DecodeError","Represents an error ocurred during decoding."],["FnIdentifier",""],["Level","Represents the level of a log message."],["MintParams","Represents the minting config"],["Mutability",""],["NativeFnIdentifier",""],["PackageAddress","A collection of blueprints, compiled and published as a single unit."],["PackageFnIdentifier",""],["ProofFnIdentifier",""],["ProofRule","Resource Proof Rules"],["RENodeId",""],["RadixEngineInput",""],["Receiver",""],["ResourceAddress","Represents a resource address."],["ResourceManagerFnIdentifier",""],["ResourceMethodAuthKey",""],["ResourceType","Represents the type of a resource."],["RoundingMode","Defines how rounding should be done."],["ScryptoActor",""],["ScryptoRENode",""],["ScryptoType","Scrypto types are special types that are Scrypto specific and may require special interpretation."],["ScryptoValueReplaceError",""],["SoftCount",""],["SoftDecimal",""],["SoftResource",""],["SoftResourceOrNonFungible",""],["SoftResourceOrNonFungibleList",""],["SubstateId","TODO: separate space addresses?"],["SystemFnIdentifier",""],["TransactionProcessorFnIdentifier",""],["Type","Represents a SBOR type."],["Value","Represents a SBOR value."],["VaultFnIdentifier",""],["WorktopFnIdentifier",""]],"fn":[["decode_any","Decode any SBOR data."],["hash","Computes the hash digest of a message."],["require",""],["scrypto_decode","Decodes an instance of `T` from a slice."],["scrypto_encode","Encodes a data structure into byte array."]],"macro":[["access_rule_node",""],["args","Constructs argument list for Scrypto function/method invocation."],["format","Creates a `String` using interpolation of runtime expressions."],["rule",""],["vec","Creates a `Vec` containing the arguments."]],"mod":[["btree_map","An ordered map based on a B-Tree."],["btree_set","An ordered set based on a B-Tree."],["fmt","Utilities for formatting and printing `String`s."],["hash_map","A hash map implemented with quadratic probing and SIMD lookup."],["hash_set","A hash set implemented as a `HashMap` where the value is `()`."],["ptr","Manually manage memory through raw pointers."],["vec","A contiguous growable array type with heap-allocated contents, written `Vec<T>`."]],"struct":[["AccessRules","Method authorization rules for a component"],["AuthZoneClearInput",""],["AuthZoneCreateProofByAmountInput",""],["AuthZoneCreateProofByIdsInput",""],["AuthZoneCreateProofInput",""],["AuthZonePopInput",""],["AuthZonePushInput",""],["BTreeMap","An ordered map based on a B-Tree."],["BTreeSet","An ordered set based on a B-Tree."],["Bech32Decoder","Represents a decoder which understands how to decode Scrypto addresses in Bech32."],["Bech32Encoder","Represents an encoder which understands how to encode Scrypto addresses in Bech32."],["BlueprintAbi",""],["Box","A pointer type for heap allocation."],["BucketCreateProofInput",""],["BucketGetAmountInput",""],["BucketGetNonFungibleIdsInput",""],["BucketGetResourceAddressInput",""],["BucketPutInput",""],["BucketTakeInput",""],["BucketTakeNonFungiblesInput",""],["ComponentAddAccessCheckInput",""],["ConsumingBucketBurnInput",""],["ConsumingProofDropInput",""],["Decimal","`Decimal` represents a 256 bit representation of a fixed-scale decimal number."],["EcdsaPublicKey","Represents an ECDSA public key."],["EcdsaSignature","Represents an ECDSA signature."],["Hash","Represents a 32-byte hash digest."],["HashMap","A hash map implemented with quadratic probing and SIMD lookup."],["HashSet","A hash set implemented as a `HashMap` where the value is `()`."],["I256","Provides safe integer arithmetic."],["NetworkDefinition","Network Definition is intended to be the actual definition of a network"],["NonFungibleAddress","Identifier for a non-fungible unit."],["NonFungibleId","Represents a key for a non-fungible resource"],["Package",""],["PackagePublishInput",""],["PhantomData","Zero-sized type used to mark things that “act like” they own a `T`."],["ProofCloneInput",""],["ProofGetAmountInput",""],["ProofGetNonFungibleIdsInput",""],["ProofGetResourceAddressInput",""],["Rc","A single-threaded reference-counting pointer. ‘Rc’ stands for ‘Reference Counted’."],["Ref","Wraps a borrowed reference to a value in a `RefCell` box. A wrapper type for an immutably borrowed value from a `RefCell<T>`."],["RefCell","A mutable memory location with dynamically checked borrow rules"],["RefMut","A wrapper type for a mutably borrowed value from a `RefCell<T>`."],["ResourceManagerCreateBucketInput",""],["ResourceManagerCreateInput",""],["ResourceManagerCreateVaultInput",""],["ResourceManagerGetMetadataInput",""],["ResourceManagerGetNonFungibleInput",""],["ResourceManagerGetResourceTypeInput",""],["ResourceManagerGetTotalSupplyInput",""],["ResourceManagerLockAuthInput",""],["ResourceManagerMintInput",""],["ResourceManagerNonFungibleExistsInput",""],["ResourceManagerUpdateAuthInput",""],["ResourceManagerUpdateMetadataInput",""],["ResourceManagerUpdateNonFungibleDataInput",""],["ScryptoValue","A Scrypto value is a SBOR value of which the custom types are the ones defined by `ScryptoType`."],["String","A UTF-8–encoded, growable string."],["SystemGetCurrentEpochInput",""],["SystemGetTransactionHashInput",""],["SystemSetEpochInput",""],["VaultCreateProofByAmountInput",""],["VaultCreateProofByIdsInput",""],["VaultCreateProofInput",""],["VaultGetAmountInput",""],["VaultGetNonFungibleIdsInput",""],["VaultGetResourceAddressInput",""],["VaultLockFeeInput",""],["VaultPutInput",""],["VaultTakeInput",""],["VaultTakeNonFungiblesInput",""],["Vec","A contiguous growable array type, written as `Vec<T>`, short for ‘vector’."]],"trait":[["AddAssign","The addition assignment operator `+=`."],["Decode","A data structure that can be decoded from a byte array using SBOR."],["Encode","A data structure that can be serialized into a byte array using SBOR."],["FromStr","Parse a value from a string"],["ToOwned","A generalization of `Clone` to borrowed data."],["ToString","A trait for converting a value to a `String`."],["TypeId","A SBOR type ID."]],"type":[["BucketId",""],["KeyValueStoreId",""],["ProofId",""],["VaultId",""]]});