initSidebarItems({"derive":[["Decode","Derive code that decodes this data structure from a byte array."],["Describe","Derive code that describes this data structure."],["Encode","Derive code that encodes this data structure"],["NonFungibleData","Derive code that describe a non-fungible data structure."],["TypeId","Derive code that returns the type ID."]],"fn":[["scrypto_decode","Decodes an instance of `T` from a slice."],["scrypto_encode","Encodes a data structure into byte array."]],"macro":[["blueprint","Declares a blueprint."],["import","Imports a blueprint from its ABI."],["vec","Creates a `Vec` containing the arguments."]],"mod":[["vec","A contiguous growable array type with heap-allocated contents, written `Vec<T>`."]],"struct":[["BTreeMap","An ordered map based on a B-Tree."],["BTreeSet","An ordered set based on a B-Tree."],["HashMap","A hash map implemented with quadratic probing and SIMD lookup."],["HashSet","A hash set implemented as a `HashMap` where the value is `()`."],["String","A UTF-8–encoded, growable string."],["Vec","A contiguous growable array type, written as `Vec<T>`, short for ‘vector’."]],"trait":[["Decode","A data structure that can be decoded from a byte array using SBOR."],["Describe","A data structure that can be described using SBOR types."],["Encode","A data structure that can be serialized into a byte array using SBOR."],["FromPrimitive","A generic trait for converting a number to a value."],["FromStr","Parse a value from a string"],["One","Defines a multiplicative identity element for `Self`."],["Pow","Binary operator for raising a value to a power."],["Signed","Useful functions for signed numbers (i.e. numbers that can be negative)."],["ToOwned","A generalization of `Clone` to borrowed data."],["ToPrimitive","A generic trait for converting a value to a number."],["ToString","A trait for converting a value to a `String`."],["TypeId","A SBOR type ID."],["Zero","Defines an additive identity element for `Self`."]]});